
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                   @id @default(autoincrement())
  username      String                @unique
  email         String                @unique
  password_hash String
  role          String
  created_at    DateTime              @default(now())
  updated_at    DateTime              @default(now())
  stores        Store[]
  transactions  PlatformTransaction[]
}

model Plan {
  id         Int      @id @default(autoincrement())
  name       String
  price      Float
  features   Json
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  stores     Store[]
}

model Store {
  id                  Int                   @id @default(autoincrement())
  owner_id            Int
  name                String
  description         String?
  logo_url            String?
  theme_id            Int?
  custom_domain       String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  is_published        Boolean               @default(false)
  plan_id             Int
  owner               User                  @relation(fields: [owner_id], references: [id])
  plan                Plan                  @relation(fields: [plan_id], references: [id])
  categories          Category[]
  products            Product[]
  orders              Order[]
  transactions        StoreTransaction[]
  storeUsers          StoreUser[]
  platformTransactions PlatformTransaction[]
}

model StoreUser {
  id            Int      @id @default(autoincrement())
  store_id      Int
  username      String
  email         String
  password_hash String
  role          String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  store         Store    @relation(fields: [store_id], references: [id])
  orders        Order[]
}

model Category {
  id         Int        @id @default(autoincrement())
  store_id   Int
  name       String
  parent_id  Int?
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  store      Store      @relation(fields: [store_id], references: [id])
  parent     Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children   Category[] @relation("CategoryToCategory")
  products   Product[]
}

model Product {
  id                 Int         @id @default(autoincrement())
  store_id           Int
  name               String
  description        String?
  price              Float
  inventory_quantity Int
  category_id        Int
  created_at         DateTime    @default(now())
  updated_at         DateTime    @default(now())
  store              Store       @relation(fields: [store_id], references: [id])
  category           Category    @relation(fields: [category_id], references: [id])
  orderItems         OrderItem[]
}

model Order {
  id            Int                @id @default(autoincrement())
  store_id      Int
  store_user_id Int
  status        String
  total_amount  Float
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now())
  store         Store              @relation(fields: [store_id], references: [id])
  storeUser     StoreUser          @relation(fields: [store_user_id], references: [id])
  orderItems    OrderItem[]
  transactions  StoreTransaction[]
}

model OrderItem {
  id                Int      @id @default(autoincrement())
  order_id          Int
  product_id        Int
  quantity          Int
  price_at_purchase Float
  created_at        DateTime @default(now())
  order             Order    @relation(fields: [order_id], references: [id])
  product           Product  @relation(fields: [product_id], references: [id])
}

model PlatformTransaction {
  id               Int      @id @default(autoincrement())
  user_id          Int
  store_id         Int
  amount           Float
  type             String
  status           String
  payment_method   String
  transaction_date DateTime @default(now())
  user             User     @relation(fields: [user_id], references: [id])
  store            Store    @relation(fields: [store_id], references: [id])
}

model StoreTransaction {
  id               Int      @id @default(autoincrement())
  store_id         Int
  order_id         Int
  amount           Float
  status           String
  payment_method   String
  transaction_date DateTime @default(now())
  store            Store    @relation(fields: [store_id], references: [id])
  order            Order    @relation(fields: [order_id], references: [id])
}
